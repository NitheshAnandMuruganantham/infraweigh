table:
  schema: public
  name: issues
object_relationships:
  - name: severityBySeverity
    using:
      foreign_key_constraint_on: severity
  - name: user
    using:
      foreign_key_constraint_on: user_id
insert_permissions:
  - role: customer
    permission:
      check: {}
      set:
        user_id: x-hasura-user-id
      columns:
        - message
        - severity
        - title
  - role: tenantAdmin
    permission:
      check: {}
      set:
        user_id: x-hasura-user-id
      columns:
        - message
        - severity
        - title
  - role: terminal
    permission:
      check: {}
      set:
        user_id: x-hasura-user-id
      columns:
        - message
        - severity
        - title
select_permissions:
  - role: maintainer
    permission:
      columns:
        - resolved
        - message
        - severity
        - title
        - created_at
        - updated_at
        - id
        - user_id
      filter:
        user:
          tenent:
            maintainer_id:
              _eq: X-Hasura-User-Id
      allow_aggregations: true
  - role: tenantAdmin
    permission:
      columns:
        - resolved
        - message
        - severity
        - title
        - created_at
        - updated_at
        - id
        - user_id
      filter:
        user:
          tenent_id:
            _eq: X-Hasura-tenent-id
      allow_aggregations: true
update_permissions:
  - role: maintainer
    permission:
      columns:
        - resolved
      filter:
        user:
          tenent:
            maintainer_id:
              _eq: X-Hasura-User-Id
      check:
        user:
          tenent:
            maintainer_id:
              _eq: X-Hasura-User-Id
event_triggers:
  - name: issue_notification
    definition:
      enable_manual: false
      insert:
        columns: '*'
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook_from_env: SERVER_URL
    headers:
      - name: api-key
        value_from_env: API_KEY
    request_transform:
      body:
        action: transform
        template: |-
          {
            "id":{{$body.id}},
            "created_at":{{$body.created_at}},
            "title":{{$body.event.data.new.title}},
            "message":{{$body.event.data.new.message}},
            "user_id":{{$body.event.data.new.user_id}},
            "resolved":{{$body.event.data.new.resolved}},
            "severity":{{$body.event.data.new.severity}}
            }
      url: '{{$base_url}}/webhook/issues/create'
      method: POST
      version: 2
      query_params: {}
      template_engine: Kriti
  - name: update_issue
    definition:
      enable_manual: false
      update:
        columns: '*'
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook_from_env: SERVER_URL
    headers:
      - name: api-key
        value_from_env: API_KEY
    request_transform:
      body:
        action: transform
        template: |-
          {
            "id":{{$body.id}},
            "created_at":{{$body.created_at}},
            "title":{{$body.event.data.new.title}},
            "message":{{$body.event.data.new.message}},
            "user_id":{{$body.event.data.new.user_id}},
            "resolved":{{$body.event.data.new.resolved}},
            "severity":{{$body.event.data.new.severity}}
            }
      url: '{{$base_url}}/webhook/issues/update'
      method: POST
      version: 2
      query_params: {}
      template_engine: Kriti
